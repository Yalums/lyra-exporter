{"version":3,"file":"static/js/843.c3431e18.chunk.js","mappings":"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","sources":["utils/exportManager.js"],"sourcesContent":["// utils/exportManager.js\n// 重构后的导出管理模块\n\nimport { DateTimeUtils, StorageUtils } from './commonUtils';\nimport { generateFileCardUuid } from './uuidManager';\n\n/**\n * 导出配置\n */\nexport const ExportConfig = {\n  DEFAULT: {\n    includeThinking: true,\n    includeTools: true,\n    includeArtifacts: true,\n    includeCitations: true,\n    includeTimestamps: false,\n    exportObsidianMetadata: false,\n    exportMarkedOnly: false,\n    excludeDeleted: true,\n    includeCompleted: false,\n    includeImportant: false,\n    obsidianProperties: [],\n    obsidianTags: []\n  }\n};\n\n/**\n * Markdown生成器类\n */\nexport class MarkdownGenerator {\n  constructor(config = {}) {\n    this.config = { ...ExportConfig.DEFAULT, ...config };\n  }\n\n  /**\n   * 生成完整的Markdown文档\n   */\n  generate(processedData) {\n    const sections = [\n      this.generateMetadata(processedData),\n      this.generateHeader(processedData),\n      this.generateMessages(processedData),\n      this.generateFooter(processedData)\n    ];\n\n    return sections.filter(Boolean).join('\\n');\n  }\n\n  /**\n   * 生成YAML前置元数据\n   */\n  generateMetadata(processedData) {\n    if (!this.config.exportObsidianMetadata) return '';\n\n    const lines = [\n      '---',\n      `title: ${processedData.meta_info?.title || '对话记录'}`,\n      `date: ${DateTimeUtils.getCurrentDate()}`,\n      `export_time: ${DateTimeUtils.formatDateTime(new Date())}`\n    ];\n\n    // 添加自定义属性\n    if (this.config.obsidianProperties?.length > 0) {\n      this.config.obsidianProperties.forEach(prop => {\n        if (prop.value.includes(',')) {\n          const values = prop.value.split(',').map(v => v.trim());\n          lines.push(`${prop.name}:`);\n          values.forEach(v => lines.push(`  - ${v}`));\n        } else {\n          lines.push(`${prop.name}: ${prop.value}`);\n        }\n      });\n    }\n\n    // 添加标签\n    if (this.config.obsidianTags?.length > 0) {\n      lines.push('tags:');\n      this.config.obsidianTags.forEach(tag => lines.push(`  - ${tag}`));\n    }\n\n    lines.push('---', '');\n    return lines.join('\\n');\n  }\n\n  /**\n   * 生成文档头部\n   */\n  generateHeader(processedData) {\n    const { meta_info = {} } = processedData;\n    const lines = [\n      `# ${meta_info.title || '对话记录'}`,\n      `*创建时间: ${meta_info.created_at || '未知'}*`,\n      `*导出时间: ${DateTimeUtils.formatDateTime(new Date())}*`\n    ];\n\n    // 如果有筛选条件，添加说明\n    const hasFiltering = this.config.excludeDeleted || this.config.includeCompleted || this.config.includeImportant;\n    if (hasFiltering) {\n      const filterDesc = this.getFilterDescription();\n      if (filterDesc) {\n        lines.push(`*筛选条件: ${filterDesc}*`);\n      }\n    }\n\n    lines.push('', '---', '');\n    return lines.join('\\n');\n  }\n\n  /**\n   * 生成消息内容\n   */\n  generateMessages(processedData) {\n    const { chat_history = [] } = processedData;\n    const filteredMessages = this.filterMessages(chat_history);\n\n    if (filteredMessages.length === 0) {\n      return '*没有符合条件的消息*\\n';\n    }\n\n    return filteredMessages\n      .map((msg, index) => this.formatMessage(msg, index + 1))\n      .join('\\n---\\n\\n');\n  }\n\n  /**\n   * 生成文档尾部\n   */\n  generateFooter(processedData) {\n    const { chat_history = [] } = processedData;\n    const filteredMessages = this.filterMessages(chat_history);\n    const originalCount = chat_history.length;\n    \n    if (filteredMessages.length < originalCount) {\n      return `\\n*根据筛选条件，从 ${originalCount} 条消息中导出了 ${filteredMessages.length} 条消息*`;\n    }\n    \n    return '';\n  }\n\n  /**\n   * 过滤消息\n   */\n  filterMessages(messages) {\n    let filtered = [...messages];\n    \n    // 获取标记数据\n    const marks = this.config.marks || { completed: new Set(), important: new Set(), deleted: new Set() };\n\n    // 排除已删除的消息\n    if (this.config.excludeDeleted) {\n      filtered = filtered.filter(msg => !marks.deleted.has(msg.index));\n    }\n\n    // 仅包含已完成的消息\n    if (this.config.includeCompleted && !this.config.includeImportant) {\n      filtered = filtered.filter(msg => marks.completed.has(msg.index));\n    }\n    \n    // 仅包含重要的消息\n    if (this.config.includeImportant && !this.config.includeCompleted) {\n      filtered = filtered.filter(msg => marks.important.has(msg.index));\n    }\n    \n    // 同时包含已完成和重要的消息\n    if (this.config.includeCompleted && this.config.includeImportant) {\n      filtered = filtered.filter(msg => \n        marks.completed.has(msg.index) && marks.important.has(msg.index)\n      );\n    }\n\n    return filtered;\n  }\n\n\n\n  /**\n  * 格式化单条消息\n  */\n  formatMessage(msg, index) {\n  const lines = [];\n\n  // 标题 - 使用配置的格式\n  const branchMarker = this.getBranchMarker(msg);\n  const title = this.formatMessageTitle(msg, index, branchMarker);\n    lines.push(title);\n\n  // 时间戳\n  if (this.config.includeTimestamps && msg.timestamp) {\n    lines.push(`*${msg.timestamp}*`);\n    }\n\n    lines.push('');\n\n  // 正文\n  if (msg.display_text) {\n    lines.push(msg.display_text, '');\n    }\n\n    // 思考过程\n    if (msg.thinking && this.config.includeThinking) {\n      lines.push(this.formatThinking(msg.thinking));\n    }\n\n    // Artifacts\n    if (msg.artifacts?.length > 0 && this.config.includeArtifacts) {\n      msg.artifacts.forEach(artifact => {\n        lines.push(this.formatArtifact(artifact));\n      });\n    }\n\n    // 工具使用\n    if (msg.tools?.length > 0 && this.config.includeTools) {\n      msg.tools.forEach(tool => {\n        lines.push(this.formatTool(tool));\n      });\n    }\n\n    // 引用\n    if (msg.citations?.length > 0 && this.config.includeCitations) {\n      lines.push(this.formatCitations(msg.citations));\n    }\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * 格式化思考过程\n   */\n  formatThinking(thinking) {\n    return [\n      '<details>',\n      '<summary>💭 思考过程</summary>',\n      '',\n      '```',\n      thinking,\n      '```',\n      '</details>',\n      ''\n    ].join('\\n');\n  }\n\n  /**\n   * 格式化Artifact\n   */\n  formatArtifact(artifact) {\n    const lines = [\n      '<details>',\n      `<summary>🔧 Artifact: ${artifact.title || '无标题'}</summary>`,\n      '',\n      `**类型**: \\`${artifact.type || '未知'}\\``,\n      ''\n    ];\n\n    if (artifact.command === 'create' && artifact.content) {\n      if (artifact.language) {\n        lines.push(`**语言**: \\`${artifact.language}\\``);\n      }\n      lines.push('', '**内容**:');\n      lines.push(`\\`\\`\\`${artifact.language || ''}`);\n      lines.push(artifact.content);\n      lines.push('```');\n    }\n\n    lines.push('</details>', '');\n    return lines.join('\\n');\n  }\n\n  /**\n   * 格式化工具使用\n   */\n  formatTool(tool) {\n    const lines = [\n      '<details>',\n      `<summary>🔍 工具: ${tool.name}</summary>`,\n      ''\n    ];\n\n    if (tool.query) {\n      lines.push(`**搜索查询**: \\`${tool.query}\\``, '');\n    }\n\n    if (tool.result?.content && tool.name === 'web_search') {\n      lines.push('**搜索结果**:', '');\n      tool.result.content.slice(0, 5).forEach((item, i) => {\n        lines.push(`${i + 1}. [${item.title || '无标题'}](${item.url || '#'})`);\n      });\n    }\n\n    lines.push('</details>', '');\n    return lines.join('\\n');\n  }\n\n  /**\n   * 格式化引用\n   */\n  formatCitations(citations) {\n    const lines = [\n      '<details>',\n      '<summary>📎 引用来源</summary>',\n      '',\n      '| 标题 | 来源 |',\n      '| --- | --- |'\n    ];\n\n    citations.forEach(citation => {\n      const title = citation.title || '未知来源';\n      const url = citation.url || '#';\n      const source = url.includes('/') ? url.split('/')[2] : '未知网站';\n      lines.push(`| [${title}](${url}) | ${source} |`);\n    });\n\n    lines.push('</details>', '');\n    return lines.join('\\n');\n  }\n\n  /**\n   * 获取分支标记\n   */\n  getBranchMarker(msg) {\n    if (msg.is_branch_point) return ' 🔀';\n    if (msg.branch_level > 0) return ` ↳${msg.branch_level}`;\n    return '';\n  }\n\n  /**\n   * 格式化消息标题\n   */\n  formatMessageTitle(msg, index, branchMarker) {\n    let title = '';\n    \n    // 标题前缀 (#)\n    if (this.config.includeHeaderPrefix) {\n      title += '#'.repeat(this.config.headerLevel || 2) + ' ';\n    }\n    \n    // 序号\n    if (this.config.includeNumbering) {\n      const numberFormat = this.config.numberingFormat || 'numeric';\n      if (numberFormat === 'numeric') {\n        title += `${index}. `;\n      } else if (numberFormat === 'letter') {\n        title += `${this.toExcelColumn(index)}. `;\n      } else if (numberFormat === 'roman') {\n        title += `${this.toRoman(index)}. `;\n      }\n    }\n    \n    // 发送者标签\n    const senderLabel = this.getSenderLabel(msg);\n    title += senderLabel + branchMarker;\n    \n    return title;\n  }\n  \n  /**\n   * 获取发送者标签\n   */\n  getSenderLabel(msg) {\n    const isHuman = msg.sender === 'human' || msg.sender_label === '人类' || msg.sender_label === 'Human';\n    \n    if (this.config.humanLabel && this.config.assistantLabel) {\n      return isHuman ? this.config.humanLabel : this.config.assistantLabel;\n    }\n    \n    return msg.sender_label || (isHuman ? '人类' : 'Claude');\n  }\n  \n  /**\n   * 转换为Excel风格的字母序号\n   */\n  toExcelColumn(num) {\n    let result = '';\n    while (num > 0) {\n      num--; // 调整为0基础\n      result = String.fromCharCode(65 + (num % 26)) + result;\n      num = Math.floor(num / 26);\n    }\n    return result;\n  }\n  \n  /**\n   * 转换为罗马数字\n   */\n  toRoman(num) {\n    if (num <= 0 || num >= 4000) return num.toString(); // 罗马数字限制\n    \n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const symbols = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'];\n    let result = '';\n    \n    for (let i = 0; i < values.length; i++) {\n      while (num >= values[i]) {\n        result += symbols[i];\n        num -= values[i];\n      }\n    }\n    \n    return result;\n  }\n\n  /**\n   * 获取筛选描述\n   */\n  getFilterDescription() {\n    const filters = [];\n    \n    if (this.config.excludeDeleted) {\n      filters.push('排除已删除');\n    }\n    \n    if (this.config.includeCompleted && this.config.includeImportant) {\n      filters.push('仅已完成且重要的消息');\n    } else if (this.config.includeCompleted) {\n      filters.push('仅已完成的消息');\n    } else if (this.config.includeImportant) {\n      filters.push('仅重要的消息');\n    }\n    \n    return filters.join('，');\n  }\n}\n\n/**\n * 文件导出器类\n */\nexport class FileExporter {\n  /**\n   * 保存文本到文件\n   */\n  static saveTextFile(text, fileName) {\n    try {\n      const blob = new Blob([text], { type: 'text/markdown;charset=utf-8' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      \n      a.href = url;\n      a.download = fileName;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n      \n      return true;\n    } catch (error) {\n      console.error('保存文件失败:', error);\n      alert('保存文件失败，请重试');\n      return false;\n    }\n  }\n\n  /**\n   * 导出单个文件\n   */\n  static async exportSingleFile(data, config = {}) {\n    const generator = new MarkdownGenerator(config);\n    const markdown = generator.generate(data);\n    const fileName = this.generateFileName(data, 'single');\n    \n    return this.saveTextFile(markdown, fileName);\n  }\n\n  /**\n   * 导出多个文件\n   */\n  static async exportMultipleFiles(dataList, config = {}) {\n    const sections = dataList.map((data, index) => {\n      // 对于多文件导出，每个文件都需要单独处理marks\n      // 这里暂时使用空的marks，因为多文件导出的marks处理比较复杂\n      const fileConfig = {\n        ...config,\n        marks: { completed: new Set(), important: new Set(), deleted: new Set() }\n      };\n      \n      const generator = new MarkdownGenerator(fileConfig);\n      return generator.generate(data);\n    });\n    \n    const combined = sections.join('\\n\\n---\\n---\\n\\n');\n    const fileName = this.generateFileName(null, 'multiple');\n    \n    return this.saveTextFile(combined, fileName);\n  }\n\n  /**\n   * 生成文件名\n   */\n  static generateFileName(data, type = 'single') {\n    const date = DateTimeUtils.getCurrentDate();\n    \n    if (type === 'single' && data?.meta_info?.title) {\n      const title = data.meta_info.title.replace(/[^a-zA-Z0-9\\u4e00-\\u9fa5]/g, '_');\n      return `${title}_${date}.md`;\n    }\n    \n    return `export_${date}.md`;\n  }\n}\n\n/**\n * 主导出函数\n */\nexport async function exportData(options) {\n  const {\n    scope = 'current',\n    data = null,\n    dataList = [],\n    config = {}\n  } = options;\n\n  try {\n    switch (scope) {\n      case 'current':\n        if (!data) throw new Error('没有可导出的数据');\n        return FileExporter.exportSingleFile(data, config);\n        \n      case 'multiple':\n        if (dataList.length === 0) throw new Error('没有可导出的数据');\n        return FileExporter.exportMultipleFiles(dataList, config);\n        \n      default:\n        throw new Error(`未知的导出范围: ${scope}`);\n    }\n  } catch (error) {\n    console.error('导出失败:', error);\n    alert(`导出失败: ${error.message}`);\n    return false;\n  }\n}\n"],"names":["ExportConfig","includeThinking","includeTools","includeArtifacts","includeCitations","includeTimestamps","exportObsidianMetadata","exportMarkedOnly","excludeDeleted","includeCompleted","includeImportant","obsidianProperties","obsidianTags","MarkdownGenerator","constructor","config","arguments","length","undefined","this","_objectSpread","generate","processedData","generateMetadata","generateHeader","generateMessages","generateFooter","filter","Boolean","join","_processedData$meta_i","_this$config$obsidian","_this$config$obsidian2","lines","concat","meta_info","title","DateTimeUtils","getCurrentDate","formatDateTime","Date","forEach","prop","value","includes","values","split","map","v","trim","push","name","tag","created_at","filterDesc","getFilterDescription","chat_history","filteredMessages","filterMessages","msg","index","formatMessage","originalCount","messages","filtered","marks","completed","Set","important","deleted","has","_msg$artifacts","_msg$tools","_msg$citations","branchMarker","getBranchMarker","formatMessageTitle","timestamp","display_text","thinking","formatThinking","artifacts","artifact","formatArtifact","tools","tool","formatTool","citations","formatCitations","type","command","content","language","_tool$result","query","result","slice","item","i","url","citation","source","is_branch_point","branch_level","includeHeaderPrefix","repeat","headerLevel","includeNumbering","numberFormat","numberingFormat","toExcelColumn","toRoman","getSenderLabel","isHuman","sender","sender_label","humanLabel","assistantLabel","num","String","fromCharCode","Math","floor","toString","symbols","filters","FileExporter","saveTextFile","text","fileName","blob","Blob","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","error","console","alert","exportSingleFile","data","markdown","generateFileName","exportMultipleFiles","dataList","combined","fileConfig","_data$meta_info","date","replace","async","exportData","options","scope","Error","message"],"sourceRoot":""}