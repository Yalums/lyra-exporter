{"version":3,"file":"static/js/843.57d009a5.chunk.js","mappings":"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","sources":["utils/exportManager.js"],"sourcesContent":["// utils/exportManager.js\n// 重构后的导出管理模块\n\nimport { DateTimeUtils, StorageUtils } from './commonUtils';\nimport { generateFileCardUuid, generateConversationCardUuid, parseUuid, generateFileHash } from './uuidManager';\nimport { extractChatData, detectBranches } from './fileParser';\nimport { MarkManager } from './markManager';\nimport { SortManager } from './sortManager';\n\n/**\n * 导出配置\n */\nexport const ExportConfig = {\n  DEFAULT: {\n    includeThinking: true,\n    includeTools: true,\n    includeArtifacts: true,\n    includeCitations: true,\n    includeAttachments: true,\n    includeTimestamps: false,\n    exportObsidianMetadata: false,\n    exportMarkedOnly: false,\n    excludeDeleted: true,\n    includeCompleted: false,\n    includeImportant: false,\n    obsidianProperties: [],\n    obsidianTags: []\n  }\n};\n\n/**\n * Markdown生成器类\n */\nexport class MarkdownGenerator {\n  constructor(config = {}) {\n    this.config = { ...ExportConfig.DEFAULT, ...config };\n  }\n\n  /**\n   * 生成完整的Markdown文档\n   */\n  generate(processedData) {\n    const sections = [\n      this.generateMetadata(processedData),\n      this.generateHeader(processedData),\n      this.generateMessages(processedData),\n      this.generateFooter(processedData)\n    ];\n\n    return sections.filter(Boolean).join('\\n');\n  }\n\n  /**\n   * 生成YAML前置元数据\n   */\n  generateMetadata(processedData) {\n    if (!this.config.exportObsidianMetadata) return '';\n\n    const lines = [\n      '---',\n      `title: ${processedData.meta_info?.title || '对话记录'}`,\n      `date: ${DateTimeUtils.getCurrentDate()}`,\n      `export_time: ${DateTimeUtils.formatDateTime(new Date())}`\n    ];\n\n    // 添加自定义属性\n    if (this.config.obsidianProperties?.length > 0) {\n      this.config.obsidianProperties.forEach(prop => {\n        if (prop.value.includes(',')) {\n          const values = prop.value.split(',').map(v => v.trim());\n          lines.push(`${prop.name}:`);\n          values.forEach(v => lines.push(`  - ${v}`));\n        } else {\n          lines.push(`${prop.name}: ${prop.value}`);\n        }\n      });\n    }\n\n    // 添加标签\n    if (this.config.obsidianTags?.length > 0) {\n      lines.push('tags:');\n      this.config.obsidianTags.forEach(tag => lines.push(`  - ${tag}`));\n    }\n\n    lines.push('---', '');\n    return lines.join('\\n');\n  }\n\n  /**\n   * 生成文档头部\n   */\n  generateHeader(processedData) {\n    const { meta_info = {} } = processedData;\n    const lines = [\n      `# ${meta_info.title || '对话记录'}`,\n      `*创建时间: ${meta_info.created_at || '未知'}*`,\n      `*导出时间: ${DateTimeUtils.formatDateTime(new Date())}*`\n    ];\n\n    // 如果有筛选条件，添加说明\n    const hasFiltering = this.config.excludeDeleted || this.config.includeCompleted || this.config.includeImportant;\n    if (hasFiltering) {\n      const filterDesc = this.getFilterDescription();\n      if (filterDesc) {\n        lines.push(`*筛选条件: ${filterDesc}*`);\n      }\n    }\n\n    lines.push('', '---', '');\n    return lines.join('\\n');\n  }\n\n  /**\n   * 生成消息内容\n   */\n  generateMessages(processedData) {\n    const { chat_history = [] } = processedData;\n    const filteredMessages = this.filterMessages(chat_history);\n\n    if (filteredMessages.length === 0) {\n      return '*没有符合条件的消息*\\n';\n    }\n\n    return filteredMessages\n      .map((msg, index) => this.formatMessage(msg, index + 1))\n      .join('\\n---\\n\\n');\n  }\n\n  /**\n   * 生成文档尾部\n   */\n  generateFooter(processedData) {\n    const { chat_history = [] } = processedData;\n    const filteredMessages = this.filterMessages(chat_history);\n    const originalCount = chat_history.length;\n    \n    if (filteredMessages.length < originalCount) {\n      return `\\n*根据筛选条件，从 ${originalCount} 条消息中导出了 ${filteredMessages.length} 条消息*`;\n    }\n    \n    return '';\n  }\n\n  /**\n   * 过滤消息\n   */\n  filterMessages(messages) {\n    let filtered = [...messages];\n    \n    // 获取标记数据\n    const marks = this.config.marks || { completed: new Set(), important: new Set(), deleted: new Set() };\n\n    // 排除已删除的消息\n    if (this.config.excludeDeleted) {\n      filtered = filtered.filter(msg => !marks.deleted.has(msg.index));\n    }\n\n    // 仅包含已完成的消息\n    if (this.config.includeCompleted && !this.config.includeImportant) {\n      filtered = filtered.filter(msg => marks.completed.has(msg.index));\n    }\n    \n    // 仅包含重要的消息\n    if (this.config.includeImportant && !this.config.includeCompleted) {\n      filtered = filtered.filter(msg => marks.important.has(msg.index));\n    }\n    \n    // 同时包含已完成和重要的消息\n    if (this.config.includeCompleted && this.config.includeImportant) {\n      filtered = filtered.filter(msg => \n        marks.completed.has(msg.index) && marks.important.has(msg.index)\n      );\n    }\n\n    return filtered;\n  }\n\n\n\n  /**\n  * 格式化单条消息\n  */\n  formatMessage(msg, index) {\n  const lines = [];\n\n  // 标题 - 使用配置的格式\n  const branchMarker = this.getBranchMarker(msg);\n  const title = this.formatMessageTitle(msg, index, branchMarker);\n    lines.push(title);\n\n  // 时间戳\n  if (this.config.includeTimestamps && msg.timestamp) {\n    lines.push(`*${msg.timestamp}*`);\n    }\n\n    lines.push('');\n\n  // 正文\n  if (msg.display_text) {\n    lines.push(msg.display_text, '');\n    }\n\n    // 附件（仅对人类消息，且配置开启时）\n    if (msg.attachments?.length > 0 && this.config.includeAttachments && msg.sender === 'human') {\n      lines.push(this.formatAttachments(msg.attachments));\n    }\n\n    // 思考过程（仅对非人类消息）\n    if (msg.thinking && this.config.includeThinking && msg.sender !== 'human') {\n      lines.push(this.formatThinking(msg.thinking));\n    }\n\n    // Artifacts（仅对非人类消息）\n    if (msg.artifacts?.length > 0 && this.config.includeArtifacts && msg.sender !== 'human') {\n      msg.artifacts.forEach(artifact => {\n        lines.push(this.formatArtifact(artifact));\n      });\n    }\n\n    // 工具使用\n    if (msg.tools?.length > 0 && this.config.includeTools) {\n      msg.tools.forEach(tool => {\n        lines.push(this.formatTool(tool));\n      });\n    }\n\n    // 引用\n    if (msg.citations?.length > 0 && this.config.includeCitations) {\n      lines.push(this.formatCitations(msg.citations));\n    }\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * 格式化思考过程\n   */\n  formatThinking(thinking) {\n    return [\n      '<details>',\n      '<summary>💭 思考过程</summary>',\n      '',\n      '```',\n      thinking,\n      '```',\n      '</details>',\n      ''\n    ].join('\\n');\n  }\n\n  /**\n   * 格式化附件\n   */\n  formatAttachments(attachments) {\n    const lines = [\n      '<details>',\n      '<summary>📎 附加文件</summary>',\n      ''\n    ];\n    \n    attachments.forEach(att => {\n      const sizeStr = this.formatFileSize(att.file_size);\n      lines.push(`- **${att.file_name}** (${sizeStr})`);\n      if (att.file_type) {\n        lines.push(`  - 类型: ${att.file_type}`);\n      }\n      if (att.extracted_content) {\n        const preview = att.extracted_content.substring(0, 200);\n        const previewText = preview.length < att.extracted_content.length ? \n          `${preview}...` : preview;\n        lines.push(`  - 内容预览: ${previewText}`);\n      }\n    });\n    \n    lines.push('', '</details>', '');\n    return lines.join('\\n');\n  }\n\n  /**\n   * 格式化文件大小\n   */\n  formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  /**\n   * 格式化Artifact\n   */\n  formatArtifact(artifact) {\n    const lines = [\n      '<details>',\n      `<summary>🔧 Artifact: ${artifact.title || '无标题'}</summary>`,\n      '',\n      `**类型**: \\`${artifact.type || '未知'}\\``,\n      ''\n    ];\n\n    if (artifact.command === 'create' && artifact.content) {\n      if (artifact.language) {\n        lines.push(`**语言**: \\`${artifact.language}\\``);\n      }\n      lines.push('', '**内容**:');\n      lines.push(`\\`\\`\\`${artifact.language || ''}`);\n      lines.push(artifact.content);\n      lines.push('```');\n    }\n\n    lines.push('</details>', '');\n    return lines.join('\\n');\n  }\n\n  /**\n   * 格式化工具使用\n   */\n  formatTool(tool) {\n    const lines = [\n      '<details>',\n      `<summary>🔍 工具: ${tool.name}</summary>`,\n      ''\n    ];\n\n    if (tool.query) {\n      lines.push(`**搜索查询**: \\`${tool.query}\\``, '');\n    }\n\n    if (tool.result?.content && tool.name === 'web_search') {\n      lines.push('**搜索结果**:', '');\n      tool.result.content.slice(0, 5).forEach((item, i) => {\n        lines.push(`${i + 1}. [${item.title || '无标题'}](${item.url || '#'})`);\n      });\n    }\n\n    lines.push('</details>', '');\n    return lines.join('\\n');\n  }\n\n  /**\n   * 格式化引用\n   */\n  formatCitations(citations) {\n    const lines = [\n      '<details>',\n      '<summary>📎 引用来源</summary>',\n      '',\n      '| 标题 | 来源 |',\n      '| --- | --- |'\n    ];\n\n    citations.forEach(citation => {\n      const title = citation.title || '未知来源';\n      const url = citation.url || '#';\n      const source = url.includes('/') ? url.split('/')[2] : '未知网站';\n      lines.push(`| [${title}](${url}) | ${source} |`);\n    });\n\n    lines.push('</details>', '');\n    return lines.join('\\n');\n  }\n\n  /**\n   * 获取分支标记\n   */\n  getBranchMarker(msg) {\n    if (msg.is_branch_point) return ' 🔀';\n    if (msg.branch_level > 0) return ` ↳${msg.branch_level}`;\n    return '';\n  }\n\n  /**\n   * 格式化消息标题\n   */\n  formatMessageTitle(msg, index, branchMarker) {\n    let title = '';\n    \n    // 标题前缀 (#)\n    if (this.config.includeHeaderPrefix) {\n      title += '#'.repeat(this.config.headerLevel || 2) + ' ';\n    }\n    \n    // 序号\n    if (this.config.includeNumbering) {\n      const numberFormat = this.config.numberingFormat || 'numeric';\n      if (numberFormat === 'numeric') {\n        title += `${index}. `;\n      } else if (numberFormat === 'letter') {\n        title += `${this.toExcelColumn(index)}. `;\n      } else if (numberFormat === 'roman') {\n        title += `${this.toRoman(index)}. `;\n      }\n    }\n    \n    // 发送者标签\n    const senderLabel = this.getSenderLabel(msg);\n    title += senderLabel + branchMarker;\n    \n    return title;\n  }\n  \n  /**\n   * 获取发送者标签\n   */\n  getSenderLabel(msg) {\n    const isHuman = msg.sender === 'human' || msg.sender_label === '人类' || msg.sender_label === 'Human';\n    \n    if (this.config.humanLabel && this.config.assistantLabel) {\n      return isHuman ? this.config.humanLabel : this.config.assistantLabel;\n    }\n    \n    return msg.sender_label || (isHuman ? '人类' : 'Claude');\n  }\n  \n  /**\n   * 转换为Excel风格的字母序号\n   */\n  toExcelColumn(num) {\n    let result = '';\n    while (num > 0) {\n      num--; // 调整为0基础\n      result = String.fromCharCode(65 + (num % 26)) + result;\n      num = Math.floor(num / 26);\n    }\n    return result;\n  }\n  \n  /**\n   * 转换为罗马数字\n   */\n  toRoman(num) {\n    if (num <= 0 || num >= 4000) return num.toString(); // 罗马数字限制\n    \n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const symbols = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'];\n    let result = '';\n    \n    for (let i = 0; i < values.length; i++) {\n      while (num >= values[i]) {\n        result += symbols[i];\n        num -= values[i];\n      }\n    }\n    \n    return result;\n  }\n\n  /**\n   * 获取筛选描述\n   */\n  getFilterDescription() {\n    const filters = [];\n    \n    if (this.config.excludeDeleted) {\n      filters.push('排除已删除');\n    }\n    \n    if (this.config.includeCompleted && this.config.includeImportant) {\n      filters.push('仅已完成且重要的消息');\n    } else if (this.config.includeCompleted) {\n      filters.push('仅已完成的消息');\n    } else if (this.config.includeImportant) {\n      filters.push('仅重要的消息');\n    }\n    \n    return filters.join('，');\n  }\n}\n\n/**\n * 文件导出器类\n */\nexport class FileExporter {\n  /**\n   * 保存文本到文件\n   */\n  static saveTextFile(text, fileName) {\n    try {\n      const blob = new Blob([text], { type: 'text/markdown;charset=utf-8' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      \n      a.href = url;\n      a.download = fileName;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n      \n      return true;\n    } catch (error) {\n      console.error('保存文件失败:', error);\n      alert('保存文件失败，请重试');\n      return false;\n    }\n  }\n\n  /**\n   * 导出单个文件\n   */\n  static async exportSingleFile(data, config = {}) {\n    const generator = new MarkdownGenerator(config);\n    const markdown = generator.generate(data);\n    const fileName = this.generateFileName(data, 'single');\n    \n    return this.saveTextFile(markdown, fileName);\n  }\n\n  /**\n   * 导出多个文件\n   */\n  static async exportMultipleFiles(dataList, config = {}) {\n    const sections = dataList.map((data, index) => {\n      // 对于多文件导出，每个文件都需要单独处理marks\n      // 这里暂时使用空的marks，因为多文件导出的marks处理比较复杂\n      const fileConfig = {\n        ...config,\n        marks: { completed: new Set(), important: new Set(), deleted: new Set() }\n      };\n      \n      const generator = new MarkdownGenerator(fileConfig);\n      return generator.generate(data);\n    });\n    \n    const combined = sections.join('\\n\\n---\\n---\\n\\n');\n    const fileName = this.generateFileName(null, 'multiple');\n    \n    return this.saveTextFile(combined, fileName);\n  }\n\n  /**\n   * 生成文件名\n   */\n  static generateFileName(data, type = 'single') {\n    const date = DateTimeUtils.getCurrentDate();\n    \n    if (type === 'single' && data?.meta_info?.title) {\n      const title = data.meta_info.title.replace(/[^a-zA-Z0-9\\u4e00-\\u9fa5]/g, '_');\n      return `${title}_${date}.md`;\n    }\n    \n    return `export_${date}.md`;\n  }\n}\n\n/**\n * 处理导出操作（从App.js移入以简化主文件）\n * @param {Object} params - 导出参数\n * @returns {Promise<boolean>} 成功与否\n */\nexport async function handleExport({\n  exportOptions,\n  processedData,\n  sortManagerRef,\n  sortedMessages,\n  markManagerRef,\n  currentBranchState,\n  operatedFiles,\n  files,\n  currentFileIndex\n}) {\n  try {\n    const exportFormatConfig = StorageUtils.getLocalStorage('export-config', {\n      includeNumbering: true,\n      numberingFormat: 'numeric',\n      senderFormat: 'default',\n      humanLabel: '人类',\n      assistantLabel: 'Claude',\n      includeHeaderPrefix: true,\n      headerLevel: 2\n    });\n    \n    let dataToExport = [];\n    \n    switch (exportOptions.scope) {\n      case 'current':\n        if (processedData) {\n          const messagesToExport = sortManagerRef?.current?.hasCustomSort() ? \n            sortedMessages : (processedData.chat_history || []);\n          \n          dataToExport = [{\n            ...processedData,\n            chat_history: messagesToExport\n          }];\n        }\n        break;\n      \n      case 'currentBranch':\n        if (processedData && currentBranchState && !currentBranchState.showAllBranches) {\n          let branchMessages = processedData.chat_history || [];\n          \n          if (currentBranchState.currentBranchIndexes && currentBranchState.currentBranchIndexes.size > 0) {\n            branchMessages = branchMessages.filter(msg => {\n              if (!msg.is_branch_point) return true;\n              const branchIndex = currentBranchState.currentBranchIndexes.get(msg.uuid);\n              if (branchIndex !== undefined) {\n                return msg.branch_id === branchIndex || msg.branch_id === null;\n              }\n              return true;\n            });\n          }\n          \n          const messagesToExport = sortManagerRef?.current?.hasCustomSort() ? \n            sortManagerRef.current.getSortedMessages().filter(msg => \n              branchMessages.some(bm => bm.uuid === msg.uuid)\n            ) : branchMessages;\n          \n          dataToExport = [{\n            ...processedData,\n            chat_history: messagesToExport\n          }];\n        }\n        break;\n        \n      case 'operated':\n        const processedFileIndices = new Set();\n        \n        for (const fileUuid of operatedFiles) {\n          const parsed = parseUuid(fileUuid);\n          let fileIndex = -1;\n          let isConversation = false;\n          let conversationUuid = null;\n          \n          if (parsed.conversationUuid) {\n            isConversation = true;\n            conversationUuid = parsed.conversationUuid;\n            fileIndex = parsed.fileIndex;\n          } else {\n            fileIndex = files.findIndex((file, index) => {\n              const fUuid = generateFileCardUuid(index, file);\n              return fUuid === fileUuid || fileUuid.includes(generateFileHash(file));\n            });\n          }\n          \n          if (fileIndex !== -1 && !processedFileIndices.has(fileIndex)) {\n            const file = files[fileIndex];\n            try {\n              const text = await file.text();\n              const jsonData = JSON.parse(text);\n              let data = extractChatData(jsonData, file.name);\n              data = detectBranches(data);\n              \n              if (data.format === 'claude_full_export' && isConversation && conversationUuid) {\n                const conversation = data.views?.conversationList?.find(\n                  conv => conv.uuid === conversationUuid\n                );\n                \n                if (conversation) {\n                  const conversationMessages = data.chat_history?.filter(\n                    msg => msg.conversation_uuid === conversationUuid && !msg.is_conversation_header\n                  ) || [];\n                  \n                  const convUuid = generateConversationCardUuid(fileIndex, conversationUuid, file);\n                  const convSortManager = new SortManager(conversationMessages, convUuid);\n                  const sortedMsgs = convSortManager.getSortedMessages();\n                  \n                  dataToExport.push({\n                    ...data,\n                    meta_info: {\n                      ...data.meta_info,\n                      title: conversation.name || '未命名对话'\n                    },\n                    chat_history: sortedMsgs,\n                    views: {\n                      conversationList: [conversation]\n                    }\n                  });\n                }\n              } else {\n                const fileSortManager = new SortManager(data.chat_history || [], fileUuid);\n                const sortedMsgs = fileSortManager.getSortedMessages();\n                \n                dataToExport.push({\n                  ...data,\n                  chat_history: sortedMsgs\n                });\n                \n                processedFileIndices.add(fileIndex);\n              }\n            } catch (err) {\n              console.error(`无法处理文件 ${file.name}:`, err);\n            }\n          }\n        }\n        break;\n        \n      case 'all':\n        for (let fileIndex = 0; fileIndex < files.length; fileIndex++) {\n          const file = files[fileIndex];\n          try {\n            const text = await file.text();\n            const jsonData = JSON.parse(text);\n            let data = extractChatData(jsonData, file.name);\n            data = detectBranches(data);\n            \n            const fileUuid = generateFileCardUuid(fileIndex, file);\n            const fileSortManager = new SortManager(data.chat_history || [], fileUuid);\n            const sortedMsgs = fileSortManager.getSortedMessages();\n            \n            dataToExport.push({\n              ...data,\n              chat_history: sortedMsgs\n            });\n          } catch (err) {\n            console.error(`无法处理文件 ${file.name}:`, err);\n          }\n        }\n        break;\n    }\n    \n    if (dataToExport.length === 0) {\n      alert('没有可导出的数据');\n      return false;\n    }\n    \n    const success = await exportData({\n      scope: dataToExport.length === 1 ? 'current' : 'multiple',\n      data: dataToExport.length === 1 ? dataToExport[0] : null,\n      dataList: dataToExport,\n      config: {\n        ...exportOptions,\n        ...exportFormatConfig,\n        marks: markManagerRef?.current ? markManagerRef.current.getMarks() : {\n          completed: new Set(),\n          important: new Set(),\n          deleted: new Set()\n        }\n      }\n    });\n    \n    return success;\n  } catch (error) {\n    console.error('导出失败:', error);\n    alert('导出失败：' + error.message);\n    return false;\n  }\n}\n\n/**\n * 主导出函数\n */\nexport async function exportData(options) {\n  const {\n    scope = 'current',\n    data = null,\n    dataList = [],\n    config = {}\n  } = options;\n\n  try {\n    switch (scope) {\n      case 'current':\n        if (!data) throw new Error('没有可导出的数据');\n        return FileExporter.exportSingleFile(data, config);\n        \n      case 'multiple':\n        if (dataList.length === 0) throw new Error('没有可导出的数据');\n        return FileExporter.exportMultipleFiles(dataList, config);\n        \n      default:\n        throw new Error(`未知的导出范围: ${scope}`);\n    }\n  } catch (error) {\n    console.error('导出失败:', error);\n    alert(`导出失败: ${error.message}`);\n    return false;\n  }\n}"],"names":["ExportConfig","includeThinking","includeTools","includeArtifacts","includeCitations","includeAttachments","includeTimestamps","exportObsidianMetadata","exportMarkedOnly","excludeDeleted","includeCompleted","includeImportant","obsidianProperties","obsidianTags","MarkdownGenerator","constructor","config","arguments","length","undefined","this","_objectSpread","generate","processedData","generateMetadata","generateHeader","generateMessages","generateFooter","filter","Boolean","join","_processedData$meta_i","_this$config$obsidian","_this$config$obsidian2","lines","concat","meta_info","title","DateTimeUtils","getCurrentDate","formatDateTime","Date","forEach","prop","value","includes","values","split","map","v","trim","push","name","tag","created_at","filterDesc","getFilterDescription","chat_history","filteredMessages","filterMessages","msg","index","formatMessage","originalCount","messages","filtered","marks","completed","Set","important","deleted","has","_msg$attachments","_msg$artifacts","_msg$tools","_msg$citations","branchMarker","getBranchMarker","formatMessageTitle","timestamp","display_text","attachments","sender","formatAttachments","thinking","formatThinking","artifacts","artifact","formatArtifact","tools","tool","formatTool","citations","formatCitations","att","sizeStr","formatFileSize","file_size","file_name","file_type","extracted_content","preview","substring","previewText","bytes","i","Math","floor","log","parseFloat","pow","toFixed","type","command","content","language","_tool$result","query","result","slice","item","url","citation","source","is_branch_point","branch_level","includeHeaderPrefix","repeat","headerLevel","includeNumbering","numberFormat","numberingFormat","toExcelColumn","toRoman","getSenderLabel","isHuman","sender_label","humanLabel","assistantLabel","num","String","fromCharCode","toString","symbols","filters","FileExporter","saveTextFile","text","fileName","blob","Blob","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","error","console","alert","exportSingleFile","data","markdown","generateFileName","exportMultipleFiles","dataList","combined","fileConfig","_data$meta_info","date","replace","async","handleExport","_ref","exportOptions","sortManagerRef","sortedMessages","markManagerRef","currentBranchState","operatedFiles","files","currentFileIndex","exportFormatConfig","StorageUtils","getLocalStorage","senderFormat","dataToExport","scope","_sortManagerRef$curre","messagesToExport","current","hasCustomSort","showAllBranches","_sortManagerRef$curre2","branchMessages","currentBranchIndexes","size","branchIndex","get","uuid","branch_id","getSortedMessages","some","bm","processedFileIndices","fileUuid","parsed","parseUuid","fileIndex","isConversation","conversationUuid","findIndex","file","generateFileCardUuid","generateFileHash","jsonData","JSON","parse","extractChatData","detectBranches","format","_data$views","_data$views$conversat","conversation","views","conversationList","find","conv","_data$chat_history","conversationMessages","conversation_uuid","is_conversation_header","convUuid","generateConversationCardUuid","sortedMsgs","SortManager","add","err","options","Error","message","exportData","getMarks"],"sourceRoot":""}